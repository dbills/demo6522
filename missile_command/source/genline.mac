.include "screen.mac"
          ;; integer 'bresenham' like
          ;; line drawing routine
          ;; 1 = short axis line length
          ;; 2 = long axis line length
          ;; 3 inx or dex 
          ;; for 1 or 2, e.g. dx or dy
          ;; shift is when the short axis
          ;; must 'shift' due to the error
          ;; rate getting too high
          ;; inputs: Y = current long axis
          ;; position
.macro    step_short_axis saxis,laxis,step_operation
.local shift, noshift
          lda err
          clc 
          adc saxis
          bcs shift
          sta err
          cmp laxis
          bcc noshift                   ;TODO optimize
          beq noshift
shift:    
          sec
          sbc laxis
          sta err
          step_operation
noshift:
.endmacro
;;; slope controls what the long axis is
;;; short = X , steep = Y
;;; IN: A = line type, one of line_type enum
.macro generate_line_data xdirection, ydirection, slope
.local loop, iterator, short_axis_start_value, long_axis_start_value
.local long_axis_length, short_axis_length
.if (.xmatch ({slope}, steep))
  .define long_axis_length _dy
  .define short_axis_length _dx
  .if (.xmatch ({xdirection}, forward))
    .define iterator inx
    .define short_axis_start_value _x1
  .else
    .define iterator dex
    .define short_axis_start_value _x2
  .endif            
  .define long_axis_start_value _y1
.else
  .define long_axis_length _dx 
  .define short_axis_length _dy     
  .if (.xmatch ({ydirection}, forward))
    .define iterator inx
    .define short_axis_start_value _y1
  .else
    .define iterator dex
    .define short_axis_start_value _y2
  .endif            
  .define long_axis_start_value _x1
.endif
            ;; fill a struct line_data
            ldy #.sizeof(line_buffer)
            ;; store line type
            sta(_lstore),y
            iny

            lda short_axis_length
            sta err

            lda long_axis_start_value
            sta(_lstore),y
            iny
            lda long_axis_length
            sta(_lstore),y
            ;; y is long axis coordinate
            ;; x is short axis coordinate
            ;; store short axis coords in life buffer
            tay
            ldx short_axis_start_value
loop:
            txa
            sta (_lstore),y
            step_short_axis short_axis_length, long_axis_length, iterator
            dey
            bne loop
            ;; debug
            lda #$bb
            sta(_lstore),y
.endmacro
            
