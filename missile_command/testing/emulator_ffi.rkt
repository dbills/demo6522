#lang racket/base
(provide (all-defined-out))
(require ffi/unsafe)
(require ffi/unsafe/define)
(define library-name "emulator/libfake6502.so")
(define (concat head . tail ) (apply string-append (cons head tail)))
(define (make-ffi c-name f-signature)
  (get-ffi-obj c-name library-name f-signature
               (lambda () (raise-arguments-error "foreign function not found" "exported name" c-name))))
(define hook-external (make-ffi "hookexternal" (_fun (_fun -> _void) -> _void)))
(define read-6502 (make-ffi "read6502" (_fun _uint16 -> _uint8)))
(define write-6502 (make-ffi "write6502" (_fun _uint16 _uint8 -> _void)))
(define load-image (make-ffi "load_image" (_fun _string _uint16 _uint16 -> _void)))
(define load-p00 (make-ffi "load_p00" (_fun _string -> _bool)))
(define load-kernel (make-ffi "load_kernel" (_fun  -> _void)))
(define get-word (make-ffi "get_word" (_fun _uint16 -> _uint16)))
(define standard-hook (make-ffi "hook6502" (_fun -> _void)))
(define write-word (make-ffi "write16" (_fun _uint16 _uint16 -> _void)))
(define load-labels (make-ffi "load_labels" (_fun _string -> _void)))
(define write16 (make-ffi "write16" (_fun _string _uint16 -> _void)))
(define read16 (make-ffi "read16" (_fun _string -> _uint16)))
(define write8 (make-ffi "write8" (_fun _string _uint8 -> _void)))
(define read8 (make-ffi "read8" (_fun _string -> _uint8)))
(define call-label (make-ffi "call_label" (_fun _string -> _void)))
(define (time-label label)
  (init-breakpoints)
  (call-label label)
  (define cycle-start (get-cycle-count))
  (run-till-break)
  (define cycle-end (get-cycle-count))
;  (printf "s=~s e=~s\n" cycle-start cycle-end)
  (- cycle-end cycle-start))
(define step-6502 (make-ffi "step6502" (_fun -> _void)))
(define get-label (make-ffi "get_label" (_fun _string -> _uint16)))
(define (get-pc)
  (get-ffi-obj "pc" library-name _uint16))
(define (get-cycle-count)
  (get-ffi-obj "clockticks6502" library-name _uint32))
(define (get-break-now)
  "return non-zero if we've been asked to break asap"
  (get-ffi-obj "break_now" library-name _int))
(define (get-bp)
  (get-ffi-obj "break_address" library-name _uint16))
(define (set-bp break-address)
  "define a breakpoint at address"
  (set-ffi-obj! "break_address" library-name _uint16 break-address))
(define (set-break-now val)
  "set reqest to break flag to val. nonzero means break asap"
  (set-ffi-obj! "break_now" library-name _int val))

(define-ffi-definer define-emu-func (ffi-lib library-name))
(define-emu-func find_label (_fun _string (o : (_ptr o _uint16))
                                  -> (r : _uint16)
                                  -> (values o r)))
