TODO:
  1/16
  working on a queue data structure
  new missiles start at the head
  meanwhile when a missile is terminated
  the dead pointer moves
  to update active missiles we only need to
  walk from dead to head and draw them

  missiles erase now - need to work on missile detonation
  animations
  A general framed sprite animation framework could be
  built, I believe we need 16x16

  sound, make missile away sound long enough for a long missile
  if we start the detonation sound on a missile end, then that
  solves the problem to what to do on short missiles
  next thing to work on is creating a quad_sprite_draw
  which, I think is as simpe as widening the loop of bytes
  to copy from 8 to 16

WOW: this is the last time I worked on this after all the
     medical drama
  4/10
  picking up where left off, double buffering
  the main loop woul be something like this:
  begin time critical
    erase missiles old position
    draw missiles new position
  end time critical
    copy current missile position to old
    update new missile position
  5/3 ( taking some leave after medical drama )
  routine to keep missiles sorted, shortest first
  how do we control the rate of pixel plots on incoming icbm?
  we have framecnt incrementing
  we want to be able to handle anything from < 60fps to > 60fps
  if(framecnt & 3) == 3) then do something for < 60fps
  what about more? we use the fractional technique we used in pacman?
  up to 2xspeed
 
  how can we use framecnt?
  it increments every frame
  increasing series of numbers
  1,2,3,4,5,6
  I guess you could keep a 120ths counter instead of a 60s?
  0,120,240,

  pps = pixels per second
  animating once per frame = 60pps
  animating twice per frame = 120pps
  
  there are 60fps
  Let X = desired PPS
  Then X/60 = number of pixels to move per frame
  example:
    X = 90
    90/60 = 1.5
    we must move 1.5 pixels per frame
    but what does that mean when we only support integer?
    we must 'quantize' that number
    bresenham's was an example of his, where we allow an error term to be summed until it reaches
    a certain.  Quantization = mapping a continous set to a countable ( enumerable? ) set
    
    there must be a frame where we draw 2 pixels and some where we draw 1
    which frames?


    how do you map a set of 90 onto 60 ( that's a surjection ) where
    there is an equivalence class
    what is the surjective function for this?

    first of all we have to make both sets 'countable' so how are we going to represent the set of 90
    {1,2,3 ... 90 }
    {1,2,3 ... 60 }
    that doesn't seem useful as representation because many of the numbers are the same, and then there are some that
    aren't, could we rewrite the numbers?
    
    what will you look for to make the pairings? Division could be useful?
    1.5 - plot R = .5
    .5 + 1.5 = 2 plot,plot R = 0
    1,2,1,2

    each frame must do 1.5 pixels
    so each frame we are adding .5 of a remainder, this is the accumulating error term
    R = .5
    if(r>=1) plot
    R = .5 + .5
    so that takes care of the doubling what about the slowing effect?
    you have to have at least 1 to plot, 2, to plot 2
    we earn some amount of pixels each frame - we can use at most 2
    P=P+.5

    the icbm can be destroyed at any time so there is no sense in sorting them
    let's talk about collision detection , perhaps that will inform the design of the 
    data structures employed for icbms
    had the thought of dividing the screen into tiles
    are the lengths always the same?  well, yes, except for the ones launch from planes, sats
    
    what is the best way to check for colissions?
    can we do better than brute force?
    at any point in time there is a set of detonations occurring
    detonations can be presorted into some sort of tile
    should we check when we move an icbm?
    
    use the natural 8 wide column
    any given explosion is using 3 columns
    this suggest we might want to sort by char column?
    when an ICBM enters a column, we could look up
    how do we do that quickly?
    just keep a list of detonation indices

    
    



