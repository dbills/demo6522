;;; 16 bit macros
          .macro incw _1
          .local done
          inc [_1]+0
          bne done
          inc [_1]+1
done:       
          .endmacro

          .macro decw _1
          .local done
          lda  [_1]+0
          bne done
          dec [_1]+1
done:       
          dec [_1]+0
          .endmacro

          .macro mov _1,_2
          lda [_1]
          sta [_2]
          lda [_1]+1
          sta [_2]+1
          .endmacro
;;; move word immediate
.macro      movi _1,_2
            lda #.LOBYTE(_1)   ; load low byte
            sta _2             ; store low byte
            lda #.HIBYTE(_1)   ; load high byte
            sta _2+1           ; store high byte
.endmacro

          .macro cmp_w _1,_2
          .local done
          lda _1+1
          cmp #.HIBYTE(_2)       ; load high byte
          bne done
          lda _1
          cmp #.LOBYTE(_2)     ; load low byte
done:       
          .endmacro

;;; compare _1 with #_2
;;; you can use beq,bne with this
          .macro cmpi _1,_2
          .local done
          lda _1+1
          cmp #_2 >> 8       ; load high byte
          bne done
          lda _1
          cmp #[_2] & $ff    ; load low byte
done:       
          emdn
;;; move,X source,dest
;;; equiv C code: 
;;; word array[]
;;; array[2] = array[1]
          .macro movx _1,_2
          txa
          pha
          asl                         ; x*2 since it's a word
          tax
          lda [_1],x
          sta [_2],x
          inx
          lda [_1],x
          sta [_2],x
          pla
          tax
          .endmacro
