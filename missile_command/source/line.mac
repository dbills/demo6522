.ifndef _line_h
_line_h=1
.include "screen.mac"
.include "system.mac"

;;; Puts line drawing data into memory
;;; does not draw the line
;;; see lines.txt
;;; macro argments may be direct constants #5
;;; or variables for byte
;;; IN:
;;;   X: line index to draw
;;;   z_lstore: word pointer where to store line data
;;; OUT:
;;;     
.macro    li_lineto x1,y1,x2,y2
          savex
.if (.match (.left (1, {x1}), #))
            lda #(.right (.tcount ({x1})-1, {x1}))
.else
            lda x1
.endif
            sta z_x1
.if (.match (.left (1, {x2}), #))
            lda #(.right (.tcount ({x2})-1, {x2}))
.else
            lda x2
.endif
            sta z_x2

.if (.match (.left (1, {y1}), #))
            lda #(.right (.tcount ({y1})-1, {y1}))
.else
            lda y1
.endif
            sta z_y1

.if (.match (.left (1, {y2}), #))
            lda #(.right (.tcount ({y2})-1, {y2}))
.else
            lda y2
.endif
            sta z_y2
            jsr li_genline
;            jsr li_full_render
          resx
.endmacro

.enum linetype
  ltype_shallow_forward
  ltype_shallow_reverse
  ltype_steep_forward
  ltype_steep_reverse
.endenum
.define MAX_LINES 16
;;; The lines array is partitioned into two part: one for interceptors(missiles)
;;; and one for icbms.  MAX_MISSILES is delimiter, to the left is missiles, to
;;; the right are icbm.  The arcade only allowed 8 of each at a time.
.define MAX_MISSILES 8

;;; set z_lstore pointer to label linedataX
;;; i.e: z_lstore = &linedata[X];
;;; IN:
;;;   X: which line to set z_lstore to point to
;;; OUT:
;;;   z_lstore
.macro    li_setz_lstore
          lda line_offsetsL,x
          sta z_lstore
          lda line_offsetsH,x           
          sta z_lstore+1
.endmacro

.endif

;;; Erase and deactive a line
;;; IN:
;;;   X: line to erase
;;; OUT:
.macro li_deactivate
          jsr li_full_render
          lda #0
          sta line_data_indices,x
.endmacro

;;; Reset line meta data to starting values.  I.e. before a line
;;; has been plotting even a single pixel
;;; IN:
;;;   X: line to reset
;;; OUT:
.macro li_reset_line
          lda long_axis_lengths,x
          sta line_data_indices,x        
          lda long_axis_start_values,x   
          sta long_axis_current_values,x 
.endmacro

;;; Distance beteen _1 and _2
;;; IN:
;;;   _1: axis value
;;;   _2: axis value
;;;   value: a value to return in Y
;;; OUT:
;;; Y = value if _2 < _1
;;;         0 if _2 > _1
;;; A = return abs(_2 - _1) in distance
.macro    li_delta _1, _2, value
.local normal, done
          lda _2
          sec
          sbc _1
          bcs normal
          ;; x2 was < x1
          eor #$ff
          ;; we need to add 1 to finish our little 2's complement
          ;; stunt and get to x1-x2 -- and we also
          ;; need to add +1 to dx, so:
          ;; clc implied (or we wouldn't be here)
          adc #2
          ldy value                     ;output return value
          bne done                      ;bra done
normal:
          ;; C is already set if we directly branch here
          ;; and this performs the +1
          ;; otherwise it's not and this does nothing
          ;; which is fine
          adc #0
          ldy #0                        ;no return value
done:     
.endmacro
