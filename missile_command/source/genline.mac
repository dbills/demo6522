.include "screen.mac"
;;; integer 'bresenham' like
;;; line drawing routine
;;; 1 = short axis line length
;;; 2 = long axis line length
;;; 3 inx or dex
;;; for 1 or 2, e.g. dx or dy
;;; shift is when the short axis
;;; must 'shift' due to the error
;;; rate getting too high
;;; inputs: Y = current long axis
;;; position
.macro    step_short_axis saxis,laxis,step_operation
.local shift, noshift
          lda z_err
          clc
          adc saxis
          bcs shift
          sta z_err
          cmp laxis
          bcc noshift                   ;TODO optimize
          beq noshift
shift:
          sec
          sbc laxis
          sta z_err
          step_operation
noshift:
.endmacro
;;; slope controls what the long axis is
;;; short = x , steep = y
;;; IN: A = line type, one of z_line_type enum
;;;     X = index of line
.macro generate_line_data xdirection, ydirection, slope
.local loop, iterator, short_axis_start_value, long_axis_start_value
.local long_axis_length, short_axis_length
.if (.xmatch ({slope}, steep))
  .define long_axis_length z_dy
  .define short_axis_length z_dx
  .define short_axis_start_value z_x1
  .if (.xmatch ({xdirection}, forward))
    .define iterator inx
  .else
    .define iterator dex
  .endif
  .define long_axis_start_value z_y1
.else
  .define long_axis_length z_dx
  .define short_axis_length z_dy
  .define short_axis_start_value z_y1
  .if (.xmatch ({ydirection}, forward))
    .define iterator inx
  .else
    .define iterator dex
  .endif
  .define long_axis_start_value z_x1
.endif
            sta line_types,x
            lda short_axis_length
            sta z_err
            lda long_axis_start_value
            sta long_axis_start_values,x
            sta long_axis_current_values,x
            lda long_axis_length
            sta long_axis_lengths,x
            sta line_data_indices,x
            ;; y is long axis coordinate
            ;; x is short axis coordinate
            ;; we store short axis coords in line buffer
            tay
            ldx short_axis_start_value
loop:
            txa
            sta (z_lstore),y
            step_short_axis short_axis_length, long_axis_length, iterator
            dey
            bne loop
.endmacro
