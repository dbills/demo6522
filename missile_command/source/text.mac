.include "system.mac"
.importzp s_x,s_y
.macro      debug_string s
            .local mystring
.data
mystring:
            .asciiz s
.code
            mov #mystring, ptr_string
            jsr _debug_string
.endmacro

.macro       debug_number mem
            saveall
            .if (.match (.left (1, {mem}), X))
            txa
            .elseif (.match (.left (1, {mem}), Y))
            tya
            .elseif (.match (.left (1, {mem}), A))
          ;; load the saved accumulator
            tsx
            lda $100+3,x
            .else
            lda mem
            .endif
            jsr _debug_number
            resall
.endmacro
.macro      myprintf s,a1,a2,a3
            saveall
            .local mystring
.data
mystring:
            .asciiz s
.code
            .ifnblank a1
            pushw #a1
            .endif
            .ifnblank a2
            pushw #a2
            .endif
            .ifnblank a1
            pushw #a1
            .endif
            mov #mystring, ptr_string
            jsr _myprintf
            .ifnblank a1
            pla
            pla
            .endif
            .ifnblank a2
            pla
            pla
            .endif
            .ifnblank a1
            pla
            pla
            .endif
            resall
.endmacro

.macro    pos px, py
          pha
          lda #px
          sta s_x
          lda #py
          sta s_y
          pla
.endmacro

.macro      cr
            lda #0
            sta s_x
.endmacro

.macro      crlf
            pha
            lda #0
            sta s_x
            add8 #8,s_y
            pla
.endmacro

;;; print direct array contents
.macro    direct_access array
          lda array,y
.endmacro
;;; print indirect array contents
.macro    indirect_access array,pointer
          ldx pointer,y
          lda array,x
.endmacro

.macro    print_array_ start,end,accessor
          .local loop,done
          ldy start
loop:
          accessor
          sta scratch
          myprintf "%d,", scratch
          cpy end
          beq done
          iny
          jmp loop
done:     
.endmacro

.macro    print_array array,start,end
          print_array_ start,end,{direct_access array}
.endmacro

.macro    print_indirect_array array,pointer,size
          print_array_ start,end,{indirect_access array, pointer}
.endmacro
