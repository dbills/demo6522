.ifndef _line_h
_line_h=1
.include "screen.mac"
.include  "system.mac"

;;; Puts line drawing data into memory
;;; does not draw the line
;;; see lines.txt
;;; macro argments may be direct constants #5
;;; or variables for byte
;;; IN:
;;;   X: line index to draw
;;;   _lstore: word pointer where to store line data
;;; OUT:
;;;     
.macro      lineto x1,y1,x2,y2
          savex
.if (.match (.left (1, {x1}), #))
            lda #(.right (.tcount ({x1})-1, {x1}))
.else
            lda x1
.endif
            sta _x1
.if (.match (.left (1, {x2}), #))
            lda #(.right (.tcount ({x2})-1, {x2}))
.else
            lda x2
.endif
            sta _x2

.if (.match (.left (1, {y1}), #))
            lda #(.right (.tcount ({y1})-1, {y1}))
.else
            lda y1
.endif
            sta _y1

.if (.match (.left (1, {y2}), #))
            lda #(.right (.tcount ({y2})-1, {y2}))
.else
            lda y2
.endif
            sta _y2
            jsr _genline
;            jsr _general_render
          resx
.endmacro

.enum linetype
  ltype_shallow_forward
  ltype_shallow_reverse
  ltype_steep_forward
  ltype_steep_reverse
.endenum
.define MAX_LINES 2
;;; the lines array is partitioned into two parts
;;; one for interceptors(missiles) and one for icbms
;;; MAX_MISSILES is delimiter, to the left is missiles
;;; to the right are icbm
.define MAX_MISSILES 1

.endif
