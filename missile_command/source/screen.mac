.include "colors.equ"

.ifndef _SCREEN_H
_SCREEN_H = 1
.define SCREEN $200
;;; bit 9 controls color ram location
.if( SCREEN & %0000001000000000 )
  .define CLRRAM 38400
.else
  .define CLRRAM 37888
.endif
;;; screen 23x11
SCRROWS = 23 / 2
YMAX = SCRROWS * 16
SCRCOLS .set 23
XMAX = SCRCOLS * 8
;;; maximum number of points a line could have
;;; this can probably be tightened up quite a bit
;;; considering launch from BASE and top screen border
LINEMAX = (SCRCOLS * 8)
.define DEBUG_SCREEN $2000
DEBUG_SCREEN_END = DEBUG_SCREEN + (SCRCOLS * SCRROWS)
;;; you can't really set this higher than $1000
;;; with a full hires screen, as it would end up
;;; overflowing mainboard ram and heading off into
;;; chargen ROM
.define CHBASE1 $1000
;;; $1000 - $1F20 custom chars for hires screen
;;; $2000 - $21FA non-visible debug text screen
.define CHARHT  16
.INCLUDE  "zerop.mac"
.macro    sc_tallchar
          ;; activate 16 high chars
          lda $9003
          ora #1
          sta $9003
.endmacro

.macro    sc_shortchar
          lda $9003
          and #$FE
          sta $9003
.endmacro

.macro      sc_setleft _1
            lda $9000
            and #128
            ora #_1
            sta $9000
.endmacro

.macro      sc_setcolumns _1
            lda $9002
            and #%10000000
            ora #_1
            sta $9002
.endmacro

.macro    sc_setrows _1
          ;; bits 1-6 are row
          lda $9003
          and #%10000001
          ora #(_1 & %00111111) << 1
          sta $9003
.endmacro

          ;;screen memory, default $1000
          ;;Bits 4-6 of location 36869 are bits 10-12 of the
          ;;screen's address, and bit 7 of location 36866 is bit 9 of the address
          ;;of the screen
          ;; fedcba9876543210
          ;; 000xxxy000000000
          ;; y lives as bit 7 in register
          ;; 36866 ($9002)
.macro    sc_screenmem addr
.local bit9, bit10_12
          .local bit9,bit10_12
          ;;  bit [9-12] inclusive are the screen
          ;;  any bits on outside that are an error
          .IF (addr & %1110000111111111) > 0
            .ERROR "invalid screen address"
          .ELSE
          ;; move bit 9 to 7
bit9      = (addr & %0000001000000000) >> 2
          ;;  move bit 12-10 down to 6-4
bit10_12  = (addr & %0001110000000000) >> 6
          lda 36866
          and #%01111111
          ora #bit9
          sta 36866
          lda 36869
          and #%10001111
          ora #bit10_12
          sta 36869
          .ENDIF

.endmacro
;;; set character generator pointer
.macro sc_chbase _1
.local nibble
.if(_1 = $1000)
  nibble = %1100
.elseif(_1 = $1400)
  nibble = %1101
.elseif(_1 = $1800)
  nibble = %1110
.elseif(_1 = $1C00)
  nibble = %1111
.elseif(_1 = $8000)
  nibble = 0
.else
.error "invalid character base"
.endif
          lda $9005
          and #$F0
          ora #(nibble & $0F)
          sta $9005
.endmacro
          ;; inverted mode 0=off 1=on
.macro sc_invmode _1
          lda $900f
          ora #_1 & %00001000
          sta $900f
.endmacro
          ;; screen background
.macro    sc_scolor _1
          lda $900f
          and #%00001111
          ora #(_1 << 4) & %11110000
          sta $900f
.endmacro
          ;; border
.macro sc_bcolor _1
          lda $900f
          and #%11111000
          ora #_1 & %00000111
          sta $900f
.endmacro

          ;; pl_x, pl_y
          ;; a = color
          ;; 0 based 0,0 is upper left
          ;; 175,175 lower right
          ;; x_to_a = instruction to move X  coord into A
.macro    sc_plotm x_to_a
;          sty save_y
          x_to_a
          ;; divide by 8
          ;; multiply by 2 to get zp address
          ;; of screen column CHRAM ptr
          ;; and place in Y
          lsr
          lsr
          ;; instead of lsr,asl
          and #$fe
          tay
          ;; ptr_0 will be location in CHRAM
          ;; of the correct character column
          lda pltbl,y
          sta ptr_0
          lda pltbl+1,y
          sta ptr_0 + 1
          ;; grab X % 8 for
          ;; bit offset in byte
          x_to_a
          and #%00000111
          tay
          lda BMASKS,y          ;y=bitmask

          ldy _pl_y
          eor (ptr_0),y
          sta (ptr_0),y
;          ldy save_y
.endmacro
detonation_div = 128
;;; Update the global frame_cnt, a sequencing counter for animations
;;; that runs from 0-7
;;; IN:
;;; OUT:
;;;   frame_cnt: incremented by 1
.macro      sc_update_frame
            lda frame_cnt
            clc
            adc #1
            and #%00000111
            sta frame_cnt
.endmacro
.endif
