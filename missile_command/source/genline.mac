.include "screen.mac"
;;; direction control how we draw the long
;;; axis, whether we increment or decrement
;;; slope controls what the long axis is
;;; short = X , steep = Y
;;; IN: A = line type, one of line_type enum
.macro generate_line_data xdirection, ydirection, slope
.local loop, iterator, short_axis_start_value
.local long_axis_length
.if (.match ({slope}, steep))
  .define long_axis_length _dy
  .define short_axis_length _dx
  .if (.match ({xdirection}, forward))
    .define iterator inx
    .define short_axis_start_value _x1
  .else
    .define iterator dex
    .define short_axis_start_value _x2
  .endif            
  .if (.match ({ydirection}, forward))
    .define long_axis_start_value _y1
  .else
    .define iterator dex
    .define long_axis_start_value _y2
  .endif            
.else
  .define long_axis_length _dx 
  .define short_axis_length _dy     
  .if (.match ({ydirection}, forward))
    .define iterator inx
    .define short_axis_start_value _y1
  .else
    .define iterator dex
    .define short_axis_start_value _y2
  .endif            
  .if (.match ({xdirection}, forward))
    .define long_axis_start_value _x1
  .else
    .define iterator dex
    .define long_axis_start_value _x2
  .endif            
.endif
            ;; fill a struct line_data
            ldy #.sizeof(line_buffer)
            ;; store line type
            sta(_lstore),y
            iny
            lda long_axis_start_value
            sta(_lstore),y
            iny
            lda long_axis_length
            sta(_lstore),y
            ;; y is long axis coordinate
            ;; x is short axis coordinate
            ;; store short axis coords in life buffer
            tay
            ldx short_axis_start_value
loop:
            step_short_axis short_axis_length, long_axis_length, iterator
            txa
            sta (_lstore),y
            dey
            bne loop
.endmacro
            
