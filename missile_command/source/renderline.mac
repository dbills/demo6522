.include "screen.mac"
;;; Render a single pixel of a line
;;; 
;;; lines know the direction they are drawing, and that is why iterator is
;;; dynamic - either moving forward or backward through the long axis values in
;;; ram.  The short axis values are generated in the correct order at pre-
;;; rendering time.
;;; 
;;; IN:
;;;   X: line to render
;;; OUT:
;;;   Z: true if line is finished
;;;   _pl_x: x coord of pixel just plotted
;;;   _pl_y: to coord of pixel just plotted
.macro render_partial_line xdirection, ydirection, slope
.local loop, short_axis, long_axis, iterator
.if (.xmatch ({slope}, steep))          ; steep slope
  .define long_axis  _pl_y
  .define short_axis _pl_x
  .if (.xmatch ({ydirection}, forward)) ; y2 > y1
    .define iterator inc long_axis_current_values,x
  .else                                 ; y2 < y1
    .define iterator dec long_axis_current_values,x
  .endif
.else                                   ; shallow slope
  .define long_axis  _pl_x
  .define short_axis _pl_y
  .if (.xmatch ({xdirection}, forward)) ; x2 > x1
    .define iterator inc long_axis_current_values,x
  .else                                 ; x2 < x1
    .define iterator dec long_axis_current_values,x
  .endif
.endif
          lda long_axis_current_values,x
          sta long_axis
          ldy line_data_indices,x
          lda(z_lstore),y
          sta short_axis
          jsr sc_plot
          iterator
          dec line_data_indices,x
.endmacro
;;; Pre-draw a line into the global line buffer labeled line_data
;;; IN:
;;;   X: index of line to pre-render
;;;      the line meta-data must have been pre-populated
;;; OUT:
;;;   line_data: filled with pre-rendered line data: the sequence of short
;;;              axis coordinates for this line    
.macro render_line_data xdirection, ydirection, slope
.local loop
          ;; reset line starting data
          lda long_axis_lengths,x
          sta line_data_indices,x        
          lda long_axis_start_values,x   
          sta long_axis_current_values,x 
loop:
          render_partial_line xdirection, ydirection, slope
          bne loop
.endmacro
