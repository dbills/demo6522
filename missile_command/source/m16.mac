;;; 16 bit macros
.ifndef _m16_h
_m16_h = 1
.macro      incw arg
.local done
            inc arg
            bne done
            inc arg + 1
done:
.endmacro

.macro      decw _1
.local done
            lda  _1
            bne done
            dec _1 + 1
done:
            sec
            sbc #1
            sta _1
.endmacro
;;; move word
.macro      mov src, dst
.if (.match (.left (1, {src}), #))
            lda #<(.right (.tcount ({src})-1, {src}))
            sta dst
            lda #>(.right (.tcount ({src})-1, {src}))
            sta dst+1
.else
            lda src
            sta dst
            lda src+1
            sta dst+1
.endif
.endmacro
.macro      add src, dst
.if (.match (.left (1, {src}), #))
            lda #<(.right (.tcount ({src})-1, {src}))
            clc
            adc dst
            sta dst
            lda #>(.right (.tcount ({src})-1, {src}))
            adc dst+1
            sta dst+1
.else
            lda src
            clc
            adc dst
            sta dst
            lda src+1
            adc dst+1
            sta dst+1
.endif
.endmacro
.macro      add8 src, dst
            lda src
            clc
            adc dst
            sta dst
.endmacro
;;; compare word
;;; _1 may be immediate or direct
;;; _2 is always direct
          .macro cmpw _1,_2
          .local done
.if (.match (.left (1, {_1}), #))
            lda #<(.right (.tcount ({_1})-1, {_1}))
.else
            lda _1
.endif
            cmp _2
            bne done
.if (.match (.left (1, {_1}), #))
            lda #>(.right (.tcount ({_1})-1, {_1}))
.else
            lda _1+1
.endif
            cmp _2+1
done:
.endmacro

;;; compare _1 with #_2
;;; you can use beq,bne with this
.macro cmpi _1,_2
          .local done
          lda _1+1
          cmp #_2 >> 8       ; load high byte
          bne done
          lda _1
          cmp #[_2] & $ff    ; load low byte
done:
.endmacro
;;; move,X source,dest
;;; equiv C code:
;;; word array[]
;;; array[2] = array[1]
.macro movx _1,_2
          txa
          pha
          asl                         ; x*2 since it's a word
          tax
          lda [_1],x
          sta [_2],x
          inx
          lda [_1],x
          sta [_2],x
          pla
          tax
.endmacro
;;; Branch if reg is < arg
;;; 
;;; IN:
;;;   reg: A,X,Y
;;;   arg: immediate or memory
;;;   label: label to branch to 
;;; OUT:
.macro BRANCH_LT reg, arg, label
.if (.match (.left (1, {reg}), A))
          cmp arg
.elseif (.match (.left (1, {reg}), X))
          cpx arg
.elseif (.match (.left (1, {reg}), Y))
          cpy arg
.endif
          bcc label
.endmacro

.macro BRANCH_EQ reg, arg, label
.if (.match (.left (1, {reg}), A))
          cmp arg
.elseif (.match (.left (1, {reg}), X))
          cpx arg
.elseif (.match (.left (1, {reg}), Y))
          cpy arg
.endif
          beq label
.endmacro

.macro BRANCH_GT reg, arg, label
.if (.match (.left (1, {reg}), A))
          cmp arg
.elseif (.match (.left (1, {reg}), X))
          cpx arg
.elseif (.match (.left (1, {reg}), Y))
          cpy arg
.endif
          beq label
          bcs label
.endmacro

.macro BRANCH_LTE reg, arg, label
.if (.match (.left (1, {reg}), A))
          cmp arg
.elseif (.match (.left (1, {reg}), X))
          cpx arg
.elseif (.match (.left (1, {reg}), Y))
          cpy arg
.endif
          beq label
          bcc label
.endmacro

.macro BRANCH_GTE reg, arg, label
.if (.match (.left (1, {reg}), A))
          cmp arg
.elseif (.match (.left (1, {reg}), X))
          cpx arg
.elseif (.match (.left (1, {reg}), Y))
          cpy arg
.endif
          bcs label
.endmacro

.endif                                  ;header guard
