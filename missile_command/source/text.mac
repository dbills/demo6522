.include "system.mac"
.include "m16.mac"
.include "zerop.inc"

.importzp s_x,s_y

.macro    debug_number mem
          saveall
          .if (.match (.left (1, {mem}), X))
          txa
          .elseif (.match (.left (1, {mem}), Y))
          tya
          .elseif (.match (.left (1, {mem}), A))
          ;; load the saved accumulator
          tsx
          lda $100+3,x
          .else
          lda mem
          .endif
          jsr _debug_number
          resall
.endmacro

.macro    te_printf_ s, a1, a2, a3
.local mystring, done
.data
mystring:
            .asciiz s
.code
            .ifnblank a1
              pushw #a1
            .endif
            .ifnblank a2
            pushw #a2
            .endif
            .ifnblank a1
            pushw #a1
            .endif
            mov #mystring, ptr_string
            jsr te_printf_
            .ifnblank a1
            pla
            pla
            .endif
            .ifnblank a2
            pla
            pla
            .endif
            .ifnblank a1
            pla
            pla
            .endif
done:     
.endmacro

;;; C style printf, with screen positioning 
;;; if in unit test compilation mode, then positioning
;;; is disabled
;;; IN:
;;;   p1: x coord in pixel to render text
;;;   p2: y coord in pixel to render text
;;; 
;;;   see te_printf for other args
;;; OUT:
.macro    te_printf2 p1, p2, s, a1, a2, a3
          .local done
          saveall
          lda frame_cnt
          bne done
          ;; disable positioning if in unit test mode, as we generally
          ;; want those lines of text to scroll by on the screen more 
          ;; like a terminal
.ifndef TESTS
          te_clearpos p1, p2
          te_pos p1, p2
.endif
          te_printf_ s, a1, a2, a3
done:     
          resall
.endmacro

;;; C-style printf; very limited
;;; note special token/variables te_scratch_[XYA]
;;; IN:
;;;   arg1: does this and that
;;; OUT:
;;;   foo: is updated
;;;   X is clobbered
.macro    te_printf s, a1, a2, a3
          .if     (.xmatch (.left (1, {a1}), {te_scratch_X}))
            stx a1
          .elseif (.xmatch (.left (1, {a1}), {te_scratch_Y}))
            sty a1
          .elseif (.xmatch (.left (1, {a1}), {te_scratch_A}))
            sta te_scratch_A
          .endif
          saveall
          te_printf_ s, a1, a2, a3
          resall
.endmacro
;;; Positions the text cursor
;;; adapts to arguments that are a symbol vs # immediate
;;; IN:
;;;   px: x position
;;;   py: y position
;;; OUT:
;;;   s_x: x position of cursor
;;;   s_y: y position of cursor
.macro    te_pos px, py
          pha
.if (.match (.left (1, {px}), #))       ;any number 
            lda #(.right (.tcount ({px})-1, {px}))
.else
            lda px
.endif
          sta s_x
.if (.match (.left (1, {py}), #))
            lda #(.right (.tcount ({py})-1, {py}))
.else
            lda py
.endif
          sta s_y
          pla
.endmacro

;;; Clear the text line at screen coodinates
;;; IN:
;;;   px: x position
;;;   py: y position
;;; OUT:
;;;   s_x: x position of cursor
;;;   s_y: y position of cursor
.macro    te_clearpos px, py
          te_pos px,py
          jsr te_clear_line
.endmacro

.macro      cr
            lda #0
            sta s_x
.endmacro

.macro      crlf
            pha
            lda #0
            sta s_x
            ;; TEXT_HEIGHT + 1
            add8 #8, s_y
            pla
.endmacro

;;; print direct array contents
.macro    direct_access array
          lda array,y
.endmacro
;;; Prints an array to hires screen
;;; IN:
;;;   start: integer index of array begin
;;;   end:   integer index of array end
;;;   accessor: a piece of assembly code that can fetch the array value
;;;             into A
.macro    print_array_ start,end,accessor
          .local loop,done
          ldy start
loop:
          accessor
          sta scratch
          te_printf "%d,", scratch
          cpy end
          beq done
          iny
          jmp loop
done:     
.endmacro

;;; Prints an array to hires screen
;;; e.g. 
;;;   foo: dc.b 12 13 14
;;;   print_array foo, 0, 3
;;; 
;;; would print:
;;;   12, 13, 14 on the screen
;;; 
;;; IN:
;;;   start: integer index of array begin
;;;   end:   integer index of array end
.macro    print_array array,start,end
          print_array_ start,end,{direct_access array}
.endmacro
