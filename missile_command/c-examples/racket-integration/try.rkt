#lang racket/base
(require ffi/unsafe)
(define library-name "../libfake6502.so")
(define (concat head . tail ) (apply string-append (cons head tail)))
;; (define borda-in-c
;;   (get-ffi-obj "borda" library-name (_fun (_fun _int -> _int) -> _int)
;;     (lambda () (error 'libfoo "function not found"))))
;; (define load-image
;;   (get-ffi-obj "load_image" library-name (_fun _string _uint16 _uint16 -> _void)
;;    (lambda () (error library-name "load_image not found"))))
(define (make-ffi c-name f-signature)
  (get-ffi-obj c-name library-name f-signature
               (lambda () (raise-arguments-error "foreign function not found" "exported name" c-name))))
(define hook-external (make-ffi "hookexternal" (_fun (_fun -> void) -> _void)))
(define read-6502 (make-ffi "read6502" (_fun _uint16 -> _uint8)))
(define write-6502 (make-ffi "write6502" (_fun _uint16 _uint8 -> _void)))
(define load-image (make-ffi "load_image" (_fun _string _uint16 _uint16 -> _void)))
(define load-p00 (make-ffi "load_p00" (_fun _string -> _void)))
(define load-kernel (make-ffi "load_kernel" (_fun  -> _void)))
(define get-word (make-ffi "get_word" (_fun _uint16 -> _uint16)))
(define standard-hook (make-ffi "hook6502" (_fun -> _void)))
(define write-word (make-ffi "write16" (_fun _string _uint16 -> _void)))
(define load-labels (make-ffi "load_labels" (_fun -> _void)))
(define write8 (make-ffi "write8" (_fun _string _uint8 -> _void)))
(define call-label (make-ffi "call_label" (_fun _string -> _void)))
(define step-6502 (make-ffi "step6502" (_fun -> _void)))

(define get-pc (get-ffi-obj "pc" library-name _uint16))
(define get-break-now (get-ffi-obj "break_now" library-name _int))
(define get-bp (get-ffi-obj "break_address" library-name _int))
(define (set-bp break-address)
  (set-ffi-obj! "break_address" library-name _uint16 break-address))
(define (set-break-now val)
  (set-ffi-obj! "break_now" library-name _uint val))

(define (run-till-break)
  (step-6502)
  (if (= 0 (get-break-now))
      (run-till-break)
      #f))
      
(define (line-test)
  (write-word "lstore" #x2000)
  (write8 "x1" 0)
  (write8 "y1" 0)
  (write8 "y2" 0)
  (write8 "x2" 0)
  (call-label "line1"))

(define (myhook)
  (print "hi"))
(define (my6502hook)
  (if (= (get-pc) (get-bp))
      (set-break-now 1)
      #t))
(define (dump-line-data start_addr len)
  (define (loop start end accum)
                  (if (= start end)
                      accum
                      (loop (+ start 1) end (cons (read-6502 start) accum))))
  (loop start_addr (+ start_addr len) null))
  
(define (setup)
  (load-kernel)
  (load-p00 "../../a.p00")
  (printf "irq/brk = ~x\n" (get-word #xfffe))
  (printf "nmi = ~x\n" (get-word #xfffa))
  (printf "reset = ~x\n" (get-word #xfffc))
  (printf "user = ~x\n" (get-word #x314))
  (hook-external my6502hook)
  (set-break-now 0)
  (set-bp 0)
  (write-word #x2000)
  ;;(call-label "main")
  (line-test)
  (run-till-break)
  (dump-line-data #x2000 160)
)
